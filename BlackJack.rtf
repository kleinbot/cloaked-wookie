{\rtf1\ansi\ansicpg1252\cocoartf1344\cocoasubrtf720
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl320

\f0\fs24 \cf0 \expnd0\expndtw0\kerning0
# Mini-project #6 - Blackjack\
\
import simplegui\
import random\
\
# load card sprite - 949x392 - source: jfitz.com\
CARD_SIZE = (73, 98)\
CARD_CENTER = (36.5, 49)\
card_images = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/cards.jfitz.png")\
\
CARD_BACK_SIZE = (71, 96)\
CARD_BACK_CENTER = (35.5, 48)\
card_back = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/card_back.png") \'a0 \'a0\
\
# initialize some useful global variables\
in_play = False\
outcome = ""\
score = 0\
\
# define globals for cards\
SUITS = ('C', 'S', 'H', 'D')\
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')\
VALUES = \{'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10\}\
\
\
#p_msg = "You have "\
# define card class\
class Card:\
\'a0 \'a0 def __init__(self, suit, rank):\
\'a0 \'a0 \'a0 \'a0 if (suit in SUITS) and (rank in RANKS):\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 self.suit = suit\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 self.rank = rank\
\'a0 \'a0 \'a0 \'a0 else:\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 self.suit = None\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 self.rank = None\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 print "Invalid card: ", suit, rank\
\
\'a0 \'a0 def __str__(self):\
\'a0 \'a0 \'a0 \'a0 return self.suit + self.rank\
\
\'a0 \'a0 def get_suit(self):\
\'a0 \'a0 \'a0 \'a0 return self.suit\
\
\'a0 \'a0 def get_rank(self):\
\'a0 \'a0 \'a0 \'a0 return self.rank\
\
\'a0 \'a0 def draw(self, canvas, pos):\
\'a0 \'a0 \'a0 \'a0 card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank),\'a0\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))\
\'a0 \'a0 \'a0 \'a0 canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)\
\'a0 \'a0 \'a0 \'a0\'a0\
# define hand class\
class Hand:\
\'a0 \'a0 def __init__(self): \'a0# create Hand object\
\'a0 \'a0 \'a0 \'a0 self.my_hand = []\
\'a0 \'a0 \'a0 \'a0 self.pos = [0, 400]\
\
\'a0 \'a0 def __str__(self):\
\'a0 \'a0 \'a0 \'a0 string = 'hand contains '\
\'a0 \'a0 \'a0 \'a0 for card in self.my_hand:\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 string += str(card.suit) + str(card.rank) + ' v=' + str(VALUES[card.rank]) + ' '\'a0\
\'a0 \'a0 \'a0 \'a0 return string # return a string representation of a hand\
\
\'a0 \'a0 def add_card(self, card):\
\'a0 \'a0 \'a0 \'a0 self.my_hand.append(card)\
\
\'a0 \'a0 def get_value(self):\
\'a0 \'a0 \'a0 \'a0 ## count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust\
\'a0 \'a0 \'a0 \'a0\'a0\
\'a0 \'a0 \'a0 \'a0 self.value = 0 \'a0 \'a0## hands may have changed so reset counting for a new get_value\
\'a0 \'a0 \'a0 \'a0 for card in self.my_hand:\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 self.value += VALUES[card.rank]\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0\'a0\
\'a0 \'a0 \'a0 \'a0 for card in self.my_hand:\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 if VALUES[card.rank] == 1 and self.value + 10 <= 21:\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 self.value += 10\
\'a0\'a0\
\'a0 \'a0 \'a0 \'a0 return self.value \'a0 \'a0# compute the value of the hand, see Blackjack video\
\'a0 \'a0\'a0\
\'a0 \'a0 def draw(self, canvas, pos):\
# \'a0 \'a0 \'a0 \'a0pass # draw a hand on the canvas, use the draw method for cards\
# \'a0 \'a0 \'a0 \'a0p_hand_list = [p_hand]\
# \'a0 \'a0 \'a0 \'a0print p_hand_list\
# \'a0 \'a0idx = 0 \'a0 \'a0\
# \'a0 \'a0range(self.my_hand): \'a0\
\'a0 \'a0 \'a0 \'a0 for card in self.my_hand:\
\'a0 \'a0 # \'a0 \'a0 \'a0 \'a0 \'a0 \'a0print card\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 self.pos[0] = 75\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 card.draw(canvas, (self.pos[0] + 75, self.pos[1]))\
\'a0 \'a0 # \'a0 \'a0 \'a0 \'a0 \'a0 \'a0canvas.draw_image(\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0\'a0\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0\'a0\
\'a0 \'a0\'a0\
## define deck class\'a0\
class Deck: \'a0 # create a Deck object\
\'a0 \'a0 def __init__(self):\
\'a0 \'a0 \'a0 \'a0 self.deck = []\
\'a0 \'a0 \'a0 \'a0 for self.suit in SUITS:\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 for self.rank in RANKS:\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 self.deck.append(self.suit + self.rank)\
# \'a0 \'a0 \'a0 \'a0self.deck = [(self.suit + self.rank) for self.(self.suit in SUITS) in RANKS] \'a0or something???\
\
\'a0 \'a0 def shuffle(self): # shuffle the deck\'a0\
\'a0 \'a0 \'a0 \'a0 random.shuffle(self.deck) \'a0 \'a0\
\
\'a0 \'a0 def deal_card(self): # deal a card object from the deck\
\'a0 \'a0 \'a0 \'a0 c = self.deck.pop()\
\'a0 \'a0 \'a0 \'a0 suit = c[0]\
\'a0 \'a0 \'a0 \'a0 rank = c[1]\'a0\
\'a0 \'a0 \'a0 \'a0 my_card = Card(suit, rank)\
\'a0 \'a0 \'a0 \'a0 return my_card\
\'a0 \'a0 \'a0 \'a0\'a0\
\'a0 \'a0 def __str__(self): # return a string representation of a hand # return a string representing the deck\
\'a0 \'a0 \'a0 \'a0 string = 'Deck contains '\
\'a0 \'a0 \'a0 \'a0 for card in self.deck:\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 string += card + ' '\'a0\
\'a0 \'a0 \'a0 \'a0 return string\
\'a0 \'a0\'a0\
\'a0 \'a0\'a0\
############################################################## \'a0 \'a0\
\
#define event handlers for buttons\
def deal():\
\'a0 \'a0 '''Clicking the deal button results in two cards being dealt\'a0\
\'a0 \'a0 face-down to the player and one card being dealt face-down and\'a0\
\'a0 \'a0 another dealt face-up to the dealer\
\'a0 \'a0 '''\
\'a0 \'a0\'a0\
\'a0 \'a0 global outcome, in_play, p_hand, d_hand, bj_deck, p_msg\
\'a0 \'a0\'a0\
\'a0 \'a0 bj_deck = Deck()\
\'a0 \'a0 p_hand = Hand()\
\'a0 \'a0 d_hand = Hand()\
\'a0 \'a0 p_msg = "You have "\
\'a0 \'a0\'a0\
\'a0 \'a0\'a0\
\'a0 \'a0 #shuffle deck\
\'a0 \'a0\'a0\
\'a0 \'a0 bj_deck.shuffle()\
\'a0 \'a0\'a0\
# \'a0 \'a0p_card1 = bj_deck.deal_card() \'a0<----not needed\
# \'a0 \'a0p_card2 = bj_deck.deal_card() \'a0 <----not needed\
\
\'a0 \'a0 # deal two cards to player\
\'a0 \'a0 # deal two cards to dealer\
\'a0 \'a0\'a0\
\'a0 \'a0 p_hand.add_card(bj_deck.deal_card())\
\'a0 \'a0 p_hand.add_card(bj_deck.deal_card())\
\'a0 \'a0 d_hand.add_card(bj_deck.deal_card())\
\'a0 \'a0 d_hand.add_card(bj_deck.deal_card())\
\'a0 \'a0\'a0\
\'a0 \'a0 print "Player's " + str(p_hand) \'a0 #\
\'a0 \'a0 print "Dealer's " + str(d_hand) \'a0 \'a0#\
\'a0\
\'a0 \'a0 in_play = True\
\'a0 \'a0 \'a0\
\
def hit():\
\'a0 \'a0 \'a0 \'a0 # replace with your code below\
\'a0 \'a0 global in_play, p_hand, bj_deck, score, p_msg\
\'a0 \'a0 # if the hand is in play, hit the player\
\'a0 \'a0 if in_play:\
\'a0 \'a0 \'a0 \'a0 p_hand.add_card(bj_deck.deal_card())\
\'a0 \'a0 \'a0 \'a0 if p_hand.get_value() > 21:\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 p_msg += "busted!"\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 in_play = False\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 score -= 1\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 print p_msg\'a0\
\'a0 \'a0 print p_hand \'a0 \'a0#\
\'a0 \'a0 print p_hand.get_value() \'a0 \'a0#\
\'a0 \'a0 print type(p_hand)\
\'a0 \'a0\'a0\
\'a0 \'a0 # if busted, assign a message to outcome, update in_play and score\
\'a0 \'a0 \'a0 \'a0#\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0\
def stand():\
\'a0 \'a0 '''\
\'a0 \'a0 If the player has busted, remind the player that they have busted.\'a0\
\'a0 \'a0 Otherwise, repeatedly hit the dealer until his hand has value 17 or more (using a while loop).\'a0\
\'a0 \'a0 If the dealer busts, let the player know.\'a0\
\'a0 \'a0 Otherwise, compare the value of the player's and dealer's hands.\'a0\
\'a0 \'a0 If the value of the player's hand is less\'a0\
\'a0 \'a0 than or equal to the dealer's hand, the dealer wins.\'a0\
\'a0 \'a0 Otherwise the player has won.\'a0\
\'a0 \'a0 Remember the dealer wins ties in our version.\
\'a0 \'a0 '''\
\'a0 \'a0\'a0\
\'a0 \'a0 global in_play, p_hand, d_hand, bj_deck, score, p_msg\
\'a0 \'a0\'a0\
\'a0 \'a0\'a0\
\'a0 \'a0 if in_play == True:\
\'a0 \'a0 \'a0 \'a0\'a0\
\'a0 \'a0 \'a0 \'a0 while d_hand.get_value() < 17:\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 d_hand.add_card(bj_deck.deal_card()) \'a0\
\'a0 \'a0 \'a0 \'a0 print "Dealer's points: " + str(d_hand.get_value())\
\'a0 \'a0 \'a0 \'a0 in_play = False \'a0\'a0\
\'a0 \'a0 \'a0 \'a0 \'a0\'a0\
\'a0 \'a0 if d_hand.get_value() > 21 or 21 >= p_hand.get_value() > d_hand.get_value():\
\'a0 \'a0 \'a0 \'a0 p_msg += "won!!"\
\'a0 \'a0 \'a0 \'a0 print p_msg\
\'a0 \'a0 \'a0 \'a0 print "Dealer loses - " + str(d_hand)\
\'a0 \'a0 elif p_hand.get_value() > 21:\
\'a0 \'a0 \'a0 \'a0 p_msg += "!!!"\
\'a0 \'a0 \'a0 \'a0 print p_msg\
\'a0 \'a0 else:\
\'a0 \'a0 \'a0 \'a0 print "Dealer wins! - " + str(d_hand)\
\
\'a0 \'a0\'a0\
\'a0 \'a0 # if hand is in play, repeatedly hit dealer until his hand has value 17 or more\
\
\'a0 \'a0 # assign a message to outcome, update in_play and score\
\
# draw handler \'a0 \'a0\
def draw(canvas):\
\'a0 \'a0 # test to make sure that card.draw works, replace with your code below\
\'a0 \'a0 global in_play, p_hand, d_hand, bj_deck, score, p_msg\
\'a0 \'a0\'a0\
# \'a0 \'a0card = Card("S", "A")\
\'a0 \'a0\
\'a0 \'a0 p_hand.draw(canvas, (75, 400))\
\
\
# initialization frame\
frame = simplegui.create_frame("Blackjack", 600, 600)\
frame.set_canvas_background("Green")\
\
#create buttons and canvas callback\
frame.add_button("Deal", deal, 200)\
frame.add_button("Hit", \'a0hit, 200)\
frame.add_button("Stand", stand, 200)\
frame.set_draw_handler(draw)\
\
\
# get things rolling\
deal()\
frame.start()\
\
\
# remember to review the gradic rubric\
}